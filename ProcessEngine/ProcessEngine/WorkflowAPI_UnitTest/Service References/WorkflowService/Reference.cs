//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TESTING.WorkflowService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityItem", Namespace="http://schemas.datacontract.org/2004/07/Kapsch.IS.WsProcessEngine.Entities")]
    [System.SerializableAttribute()]
    public partial class ActivityItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Kapsch.IS.ProcessEngine.Shared.Enums.EnumActivityType ActivityTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Kapsch.IS.ProcessEngine.Shared.Enums.EnumActivityType ActivityType {
            get {
                return this.ActivityTypeField;
            }
            set {
                if ((this.ActivityTypeField.Equals(value) != true)) {
                    this.ActivityTypeField = value;
                    this.RaisePropertyChanged("ActivityType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkflowItem", Namespace="http://schemas.datacontract.org/2004/07/Kapsch.IS.WsProcessEngine.Entities")]
    [System.SerializableAttribute()]
    public partial class WorkflowItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ActiveProcessesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CheckedOutByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefinitionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ValidFromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ValidToField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ActiveProcesses {
            get {
                return this.ActiveProcessesField;
            }
            set {
                if ((this.ActiveProcessesField.Equals(value) != true)) {
                    this.ActiveProcessesField = value;
                    this.RaisePropertyChanged("ActiveProcesses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CheckedOutBy {
            get {
                return this.CheckedOutByField;
            }
            set {
                if ((object.ReferenceEquals(this.CheckedOutByField, value) != true)) {
                    this.CheckedOutByField = value;
                    this.RaisePropertyChanged("CheckedOutBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Created {
            get {
                return this.CreatedField;
            }
            set {
                if ((this.CreatedField.Equals(value) != true)) {
                    this.CreatedField = value;
                    this.RaisePropertyChanged("Created");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Definition {
            get {
                return this.DefinitionField;
            }
            set {
                if ((object.ReferenceEquals(this.DefinitionField, value) != true)) {
                    this.DefinitionField = value;
                    this.RaisePropertyChanged("Definition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ValidFrom {
            get {
                return this.ValidFromField;
            }
            set {
                if ((this.ValidFromField.Equals(value) != true)) {
                    this.ValidFromField = value;
                    this.RaisePropertyChanged("ValidFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ValidTo {
            get {
                return this.ValidToField;
            }
            set {
                if ((this.ValidToField.Equals(value) != true)) {
                    this.ValidToField = value;
                    this.RaisePropertyChanged("ValidTo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FcBaseException", Namespace="http://schemas.datacontract.org/2004/07/Kapsch.IS.WsProcessEngine.FaultContracts")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TESTING.WorkflowService.FcWorkflowException))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TESTING.WorkflowService.FcVariableException))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TESTING.WorkflowService.FcActivityException))]
    public partial class FcBaseException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LineNumberEndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LineNumberStartField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LineNumberEnd {
            get {
                return this.LineNumberEndField;
            }
            set {
                if ((this.LineNumberEndField.Equals(value) != true)) {
                    this.LineNumberEndField = value;
                    this.RaisePropertyChanged("LineNumberEnd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LineNumberStart {
            get {
                return this.LineNumberStartField;
            }
            set {
                if ((this.LineNumberStartField.Equals(value) != true)) {
                    this.LineNumberStartField = value;
                    this.RaisePropertyChanged("LineNumberStart");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FcWorkflowException", Namespace="http://schemas.datacontract.org/2004/07/Kapsch.IS.WsProcessEngine.FaultContracts")]
    [System.SerializableAttribute()]
    public partial class FcWorkflowException : TESTING.WorkflowService.FcBaseException {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TESTING.WorkflowService.WorkflowErrorItem[] ErrorItemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ErrorTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TESTING.WorkflowService.WorkflowErrorItem[] ErrorItems {
            get {
                return this.ErrorItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorItemsField, value) != true)) {
                    this.ErrorItemsField = value;
                    this.RaisePropertyChanged("ErrorItems");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ErrorType {
            get {
                return this.ErrorTypeField;
            }
            set {
                if ((this.ErrorTypeField.Equals(value) != true)) {
                    this.ErrorTypeField = value;
                    this.RaisePropertyChanged("ErrorType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FcVariableException", Namespace="http://schemas.datacontract.org/2004/07/Kapsch.IS.WsProcessEngine.FaultContracts")]
    [System.SerializableAttribute()]
    public partial class FcVariableException : TESTING.WorkflowService.FcBaseException {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ErrorTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ErrorType {
            get {
                return this.ErrorTypeField;
            }
            set {
                if ((this.ErrorTypeField.Equals(value) != true)) {
                    this.ErrorTypeField = value;
                    this.RaisePropertyChanged("ErrorType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FcActivityException", Namespace="http://schemas.datacontract.org/2004/07/Kapsch.IS.WsProcessEngine.FaultContracts")]
    [System.SerializableAttribute()]
    public partial class FcActivityException : TESTING.WorkflowService.FcBaseException {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ErrorTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdActivityInstanceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ErrorType {
            get {
                return this.ErrorTypeField;
            }
            set {
                if ((this.ErrorTypeField.Equals(value) != true)) {
                    this.ErrorTypeField = value;
                    this.RaisePropertyChanged("ErrorType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IdActivityInstance {
            get {
                return this.IdActivityInstanceField;
            }
            set {
                if ((object.ReferenceEquals(this.IdActivityInstanceField, value) != true)) {
                    this.IdActivityInstanceField = value;
                    this.RaisePropertyChanged("IdActivityInstance");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkflowErrorItem", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class WorkflowErrorItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LineNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LinePositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LineNumber {
            get {
                return this.LineNumberField;
            }
            set {
                if ((this.LineNumberField.Equals(value) != true)) {
                    this.LineNumberField = value;
                    this.RaisePropertyChanged("LineNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LinePosition {
            get {
                return this.LinePositionField;
            }
            set {
                if ((this.LinePositionField.Equals(value) != true)) {
                    this.LinePositionField = value;
                    this.RaisePropertyChanged("LinePosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FcPermissionException", Namespace="http://schemas.datacontract.org/2004/07/Kapsch.IS.WsProcessEngine.FaultContracts")]
    [System.SerializableAttribute()]
    public partial class FcPermissionException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCheckedOutByAnotherUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNotCheckedOutField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCheckedOutByAnotherUser {
            get {
                return this.IsCheckedOutByAnotherUserField;
            }
            set {
                if ((this.IsCheckedOutByAnotherUserField.Equals(value) != true)) {
                    this.IsCheckedOutByAnotherUserField = value;
                    this.RaisePropertyChanged("IsCheckedOutByAnotherUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNotCheckedOut {
            get {
                return this.IsNotCheckedOutField;
            }
            set {
                if ((this.IsNotCheckedOutField.Equals(value) != true)) {
                    this.IsNotCheckedOutField = value;
                    this.RaisePropertyChanged("IsNotCheckedOut");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkflowInstanceItem", Namespace="http://schemas.datacontract.org/2004/07/Kapsch.IS.WsProcessEngine.Entities")]
    [System.SerializableAttribute()]
    public partial class WorkflowInstanceItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrentActivityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefinitionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> FinishedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InstanceIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InstanceXMLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NextActivityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParentWorkflowInstanceIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Kapsch.IS.ProcessEngine.Shared.Enums.EnumWorkflowInstanceStatus StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> UpdatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Created {
            get {
                return this.CreatedField;
            }
            set {
                if ((this.CreatedField.Equals(value) != true)) {
                    this.CreatedField = value;
                    this.RaisePropertyChanged("Created");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrentActivity {
            get {
                return this.CurrentActivityField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentActivityField, value) != true)) {
                    this.CurrentActivityField = value;
                    this.RaisePropertyChanged("CurrentActivity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DefinitionID {
            get {
                return this.DefinitionIDField;
            }
            set {
                if ((object.ReferenceEquals(this.DefinitionIDField, value) != true)) {
                    this.DefinitionIDField = value;
                    this.RaisePropertyChanged("DefinitionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Finished {
            get {
                return this.FinishedField;
            }
            set {
                if ((this.FinishedField.Equals(value) != true)) {
                    this.FinishedField = value;
                    this.RaisePropertyChanged("Finished");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstanceID {
            get {
                return this.InstanceIDField;
            }
            set {
                if ((object.ReferenceEquals(this.InstanceIDField, value) != true)) {
                    this.InstanceIDField = value;
                    this.RaisePropertyChanged("InstanceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstanceXML {
            get {
                return this.InstanceXMLField;
            }
            set {
                if ((object.ReferenceEquals(this.InstanceXMLField, value) != true)) {
                    this.InstanceXMLField = value;
                    this.RaisePropertyChanged("InstanceXML");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NextActivity {
            get {
                return this.NextActivityField;
            }
            set {
                if ((object.ReferenceEquals(this.NextActivityField, value) != true)) {
                    this.NextActivityField = value;
                    this.RaisePropertyChanged("NextActivity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParentWorkflowInstanceID {
            get {
                return this.ParentWorkflowInstanceIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentWorkflowInstanceIDField, value) != true)) {
                    this.ParentWorkflowInstanceIDField = value;
                    this.RaisePropertyChanged("ParentWorkflowInstanceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Kapsch.IS.ProcessEngine.Shared.Enums.EnumWorkflowInstanceStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Updated {
            get {
                return this.UpdatedField;
            }
            set {
                if ((this.UpdatedField.Equals(value) != true)) {
                    this.UpdatedField = value;
                    this.RaisePropertyChanged("Updated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkflowMessageDataItem", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class WorkflowMessageDataItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WorkflowDefinitionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TESTING.WorkflowService.WorkflowMessageVariableItem[] WorkflowVariablesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WorkflowDefinitionID {
            get {
                return this.WorkflowDefinitionIDField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkflowDefinitionIDField, value) != true)) {
                    this.WorkflowDefinitionIDField = value;
                    this.RaisePropertyChanged("WorkflowDefinitionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TESTING.WorkflowService.WorkflowMessageVariableItem[] WorkflowVariables {
            get {
                return this.WorkflowVariablesField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkflowVariablesField, value) != true)) {
                    this.WorkflowVariablesField = value;
                    this.RaisePropertyChanged("WorkflowVariables");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkflowMessageVariableItem", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class WorkflowMessageVariableItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VarNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VarValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VarName {
            get {
                return this.VarNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VarNameField, value) != true)) {
                    this.VarNameField = value;
                    this.RaisePropertyChanged("VarName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VarValue {
            get {
                return this.VarValueField;
            }
            set {
                if ((object.ReferenceEquals(this.VarValueField, value) != true)) {
                    this.VarValueField = value;
                    this.RaisePropertyChanged("VarValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KeyValuePairItem", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class KeyValuePairItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WorkflowService.IProcessService")]
    public interface IProcessService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetProcessInstanceCountFromWorkflowID", ReplyAction="http://tempuri.org/IProcessService/GetProcessInstanceCountFromWorkflowIDResponse")]
        int GetProcessInstanceCountFromWorkflowID(string idWorkflow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetProcessInstanceCountFromWorkflowID", ReplyAction="http://tempuri.org/IProcessService/GetProcessInstanceCountFromWorkflowIDResponse")]
        System.Threading.Tasks.Task<int> GetProcessInstanceCountFromWorkflowIDAsync(string idWorkflow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetActivityItems", ReplyAction="http://tempuri.org/IProcessService/GetActivityItemsResponse")]
        TESTING.WorkflowService.ActivityItem[] GetActivityItems();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetActivityItems", ReplyAction="http://tempuri.org/IProcessService/GetActivityItemsResponse")]
        System.Threading.Tasks.Task<TESTING.WorkflowService.ActivityItem[]> GetActivityItemsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetWorkflowItems", ReplyAction="http://tempuri.org/IProcessService/GetWorkflowItemsResponse")]
        TESTING.WorkflowService.WorkflowItem[] GetWorkflowItems();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetWorkflowItems", ReplyAction="http://tempuri.org/IProcessService/GetWorkflowItemsResponse")]
        System.Threading.Tasks.Task<TESTING.WorkflowService.WorkflowItem[]> GetWorkflowItemsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetWorkflowItem", ReplyAction="http://tempuri.org/IProcessService/GetWorkflowItemResponse")]
        TESTING.WorkflowService.WorkflowItem GetWorkflowItem(string idWorkflow, string userGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetWorkflowItem", ReplyAction="http://tempuri.org/IProcessService/GetWorkflowItemResponse")]
        System.Threading.Tasks.Task<TESTING.WorkflowService.WorkflowItem> GetWorkflowItemAsync(string idWorkflow, string userGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/SaveWorkflowMetaData", ReplyAction="http://tempuri.org/IProcessService/SaveWorkflowMetaDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TESTING.WorkflowService.FcActivityException), Action="http://tempuri.org/IProcessService/SaveWorkflowMetaDataFcActivityExceptionFault", Name="FcActivityException", Namespace="http://schemas.datacontract.org/2004/07/Kapsch.IS.WsProcessEngine.FaultContracts")]
        [System.ServiceModel.FaultContractAttribute(typeof(TESTING.WorkflowService.FcWorkflowException), Action="http://tempuri.org/IProcessService/SaveWorkflowMetaDataFcWorkflowExceptionFault", Name="FcWorkflowException", Namespace="http://schemas.datacontract.org/2004/07/Kapsch.IS.WsProcessEngine.FaultContracts")]
        [System.ServiceModel.FaultContractAttribute(typeof(TESTING.WorkflowService.FcVariableException), Action="http://tempuri.org/IProcessService/SaveWorkflowMetaDataFcVariableExceptionFault", Name="FcVariableException", Namespace="http://schemas.datacontract.org/2004/07/Kapsch.IS.WsProcessEngine.FaultContracts")]
        [System.ServiceModel.FaultContractAttribute(typeof(TESTING.WorkflowService.FcPermissionException), Action="http://tempuri.org/IProcessService/SaveWorkflowMetaDataFcPermissionExceptionFault" +
            "", Name="FcPermissionException", Namespace="http://schemas.datacontract.org/2004/07/Kapsch.IS.WsProcessEngine.FaultContracts")]
        void SaveWorkflowMetaData(string idWorkflow, string name, string description, System.Nullable<System.DateTime> validFrom, System.Nullable<System.DateTime> validTo, string userGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/SaveWorkflowMetaData", ReplyAction="http://tempuri.org/IProcessService/SaveWorkflowMetaDataResponse")]
        System.Threading.Tasks.Task SaveWorkflowMetaDataAsync(string idWorkflow, string name, string description, System.Nullable<System.DateTime> validFrom, System.Nullable<System.DateTime> validTo, string userGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/SaveWorkflowXmlDefinition", ReplyAction="http://tempuri.org/IProcessService/SaveWorkflowXmlDefinitionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TESTING.WorkflowService.FcVariableException), Action="http://tempuri.org/IProcessService/SaveWorkflowXmlDefinitionFcVariableExceptionFa" +
            "ult", Name="FcVariableException", Namespace="http://schemas.datacontract.org/2004/07/Kapsch.IS.WsProcessEngine.FaultContracts")]
        [System.ServiceModel.FaultContractAttribute(typeof(TESTING.WorkflowService.FcWorkflowException), Action="http://tempuri.org/IProcessService/SaveWorkflowXmlDefinitionFcWorkflowExceptionFa" +
            "ult", Name="FcWorkflowException", Namespace="http://schemas.datacontract.org/2004/07/Kapsch.IS.WsProcessEngine.FaultContracts")]
        [System.ServiceModel.FaultContractAttribute(typeof(TESTING.WorkflowService.FcActivityException), Action="http://tempuri.org/IProcessService/SaveWorkflowXmlDefinitionFcActivityExceptionFa" +
            "ult", Name="FcActivityException", Namespace="http://schemas.datacontract.org/2004/07/Kapsch.IS.WsProcessEngine.FaultContracts")]
        [System.ServiceModel.FaultContractAttribute(typeof(TESTING.WorkflowService.FcPermissionException), Action="http://tempuri.org/IProcessService/SaveWorkflowXmlDefinitionFcPermissionException" +
            "Fault", Name="FcPermissionException", Namespace="http://schemas.datacontract.org/2004/07/Kapsch.IS.WsProcessEngine.FaultContracts")]
        void SaveWorkflowXmlDefinition(string idWorkflow, string workflowXml, string userGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/SaveWorkflowXmlDefinition", ReplyAction="http://tempuri.org/IProcessService/SaveWorkflowXmlDefinitionResponse")]
        System.Threading.Tasks.Task SaveWorkflowXmlDefinitionAsync(string idWorkflow, string workflowXml, string userGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/CreateWorkflow", ReplyAction="http://tempuri.org/IProcessService/CreateWorkflowResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TESTING.WorkflowService.FcActivityException), Action="http://tempuri.org/IProcessService/CreateWorkflowFcActivityExceptionFault", Name="FcActivityException", Namespace="http://schemas.datacontract.org/2004/07/Kapsch.IS.WsProcessEngine.FaultContracts")]
        [System.ServiceModel.FaultContractAttribute(typeof(TESTING.WorkflowService.FcWorkflowException), Action="http://tempuri.org/IProcessService/CreateWorkflowFcWorkflowExceptionFault", Name="FcWorkflowException", Namespace="http://schemas.datacontract.org/2004/07/Kapsch.IS.WsProcessEngine.FaultContracts")]
        [System.ServiceModel.FaultContractAttribute(typeof(TESTING.WorkflowService.FcVariableException), Action="http://tempuri.org/IProcessService/CreateWorkflowFcVariableExceptionFault", Name="FcVariableException", Namespace="http://schemas.datacontract.org/2004/07/Kapsch.IS.WsProcessEngine.FaultContracts")]
        TESTING.WorkflowService.WorkflowItem CreateWorkflow(string name, string description, System.Nullable<System.DateTime> validFrom, System.Nullable<System.DateTime> validTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/CreateWorkflow", ReplyAction="http://tempuri.org/IProcessService/CreateWorkflowResponse")]
        System.Threading.Tasks.Task<TESTING.WorkflowService.WorkflowItem> CreateWorkflowAsync(string name, string description, System.Nullable<System.DateTime> validFrom, System.Nullable<System.DateTime> validTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/CheckoutWorkflow", ReplyAction="http://tempuri.org/IProcessService/CheckoutWorkflowResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TESTING.WorkflowService.FcPermissionException), Action="http://tempuri.org/IProcessService/CheckoutWorkflowFcPermissionExceptionFault", Name="FcPermissionException", Namespace="http://schemas.datacontract.org/2004/07/Kapsch.IS.WsProcessEngine.FaultContracts")]
        TESTING.WorkflowService.WorkflowItem CheckoutWorkflow(string idWorkflow, string userGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/CheckoutWorkflow", ReplyAction="http://tempuri.org/IProcessService/CheckoutWorkflowResponse")]
        System.Threading.Tasks.Task<TESTING.WorkflowService.WorkflowItem> CheckoutWorkflowAsync(string idWorkflow, string userGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/CheckinWorkflow", ReplyAction="http://tempuri.org/IProcessService/CheckinWorkflowResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TESTING.WorkflowService.FcPermissionException), Action="http://tempuri.org/IProcessService/CheckinWorkflowFcPermissionExceptionFault", Name="FcPermissionException", Namespace="http://schemas.datacontract.org/2004/07/Kapsch.IS.WsProcessEngine.FaultContracts")]
        TESTING.WorkflowService.WorkflowItem CheckinWorkflow(string idWorkflow, string userGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/CheckinWorkflow", ReplyAction="http://tempuri.org/IProcessService/CheckinWorkflowResponse")]
        System.Threading.Tasks.Task<TESTING.WorkflowService.WorkflowItem> CheckinWorkflowAsync(string idWorkflow, string userGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/UndoCheckout", ReplyAction="http://tempuri.org/IProcessService/UndoCheckoutResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TESTING.WorkflowService.FcPermissionException), Action="http://tempuri.org/IProcessService/UndoCheckoutFcPermissionExceptionFault", Name="FcPermissionException", Namespace="http://schemas.datacontract.org/2004/07/Kapsch.IS.WsProcessEngine.FaultContracts")]
        TESTING.WorkflowService.WorkflowItem UndoCheckout(string idWorkflow, string userGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/UndoCheckout", ReplyAction="http://tempuri.org/IProcessService/UndoCheckoutResponse")]
        System.Threading.Tasks.Task<TESTING.WorkflowService.WorkflowItem> UndoCheckoutAsync(string idWorkflow, string userGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/DeleteWorkflow", ReplyAction="http://tempuri.org/IProcessService/DeleteWorkflowResponse")]
        void DeleteWorkflow(string idWorkflow, bool deleteAllVersions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/DeleteWorkflow", ReplyAction="http://tempuri.org/IProcessService/DeleteWorkflowResponse")]
        System.Threading.Tasks.Task DeleteWorkflowAsync(string idWorkflow, bool deleteAllVersions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetWorkflowXmlWithNewActivityId", ReplyAction="http://tempuri.org/IProcessService/GetWorkflowXmlWithNewActivityIdResponse")]
        string GetWorkflowXmlWithNewActivityId(string xml, string idActivity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetWorkflowXmlWithNewActivityId", ReplyAction="http://tempuri.org/IProcessService/GetWorkflowXmlWithNewActivityIdResponse")]
        System.Threading.Tasks.Task<string> GetWorkflowXmlWithNewActivityIdAsync(string xml, string idActivity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetWorkflowXmlWithNewSubworkflowActivity", ReplyAction="http://tempuri.org/IProcessService/GetWorkflowXmlWithNewSubworkflowActivityRespon" +
            "se")]
        string GetWorkflowXmlWithNewSubworkflowActivity(string workflowXml, string activityID, string subworkflowDefinitionID, string subworkflowVariables);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetWorkflowXmlWithNewSubworkflowActivity", ReplyAction="http://tempuri.org/IProcessService/GetWorkflowXmlWithNewSubworkflowActivityRespon" +
            "se")]
        System.Threading.Tasks.Task<string> GetWorkflowXmlWithNewSubworkflowActivityAsync(string workflowXml, string activityID, string subworkflowDefinitionID, string subworkflowVariables);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/IsPackageUsedInActiveWorkflow", ReplyAction="http://tempuri.org/IProcessService/IsPackageUsedInActiveWorkflowResponse")]
        bool IsPackageUsedInActiveWorkflow(string obcoGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/IsPackageUsedInActiveWorkflow", ReplyAction="http://tempuri.org/IProcessService/IsPackageUsedInActiveWorkflowResponse")]
        System.Threading.Tasks.Task<bool> IsPackageUsedInActiveWorkflowAsync(string obcoGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/WakeupWorkflow", ReplyAction="http://tempuri.org/IProcessService/WakeupWorkflowResponse")]
        void WakeupWorkflow(string workflowInstanceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/WakeupWorkflow", ReplyAction="http://tempuri.org/IProcessService/WakeupWorkflowResponse")]
        System.Threading.Tasks.Task WakeupWorkflowAsync(string workflowInstanceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetWorkflowInstances", ReplyAction="http://tempuri.org/IProcessService/GetWorkflowInstancesResponse")]
        TESTING.WorkflowService.WorkflowInstanceItem[] GetWorkflowInstances();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetWorkflowInstances", ReplyAction="http://tempuri.org/IProcessService/GetWorkflowInstancesResponse")]
        System.Threading.Tasks.Task<TESTING.WorkflowService.WorkflowInstanceItem[]> GetWorkflowInstancesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/SaveWorkflowInstanceItem", ReplyAction="http://tempuri.org/IProcessService/SaveWorkflowInstanceItemResponse")]
        void SaveWorkflowInstanceItem(string idWorkflowInstance, string instanceXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/SaveWorkflowInstanceItem", ReplyAction="http://tempuri.org/IProcessService/SaveWorkflowInstanceItemResponse")]
        System.Threading.Tasks.Task SaveWorkflowInstanceItemAsync(string idWorkflowInstance, string instanceXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetWorkflowInstanceItem", ReplyAction="http://tempuri.org/IProcessService/GetWorkflowInstanceItemResponse")]
        TESTING.WorkflowService.WorkflowInstanceItem GetWorkflowInstanceItem(string workflowInstanceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetWorkflowInstanceItem", ReplyAction="http://tempuri.org/IProcessService/GetWorkflowInstanceItemResponse")]
        System.Threading.Tasks.Task<TESTING.WorkflowService.WorkflowInstanceItem> GetWorkflowInstanceItemAsync(string workflowInstanceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetDataHelperName", ReplyAction="http://tempuri.org/IProcessService/GetDataHelperNameResponse")]
        string GetDataHelperName(string workflowDefinitionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetDataHelperName", ReplyAction="http://tempuri.org/IProcessService/GetDataHelperNameResponse")]
        System.Threading.Tasks.Task<string> GetDataHelperNameAsync(string workflowDefinitionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/CreateWorkflowInstance", ReplyAction="http://tempuri.org/IProcessService/CreateWorkflowInstanceResponse")]
        string CreateWorkflowInstance(TESTING.WorkflowService.WorkflowMessageDataItem workflowMessageDataItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/CreateWorkflowInstance", ReplyAction="http://tempuri.org/IProcessService/CreateWorkflowInstanceResponse")]
        System.Threading.Tasks.Task<string> CreateWorkflowInstanceAsync(TESTING.WorkflowService.WorkflowMessageDataItem workflowMessageDataItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetAllEmailDocumentTemplates", ReplyAction="http://tempuri.org/IProcessService/GetAllEmailDocumentTemplatesResponse")]
        TESTING.WorkflowService.KeyValuePairItem[] GetAllEmailDocumentTemplates();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetAllEmailDocumentTemplates", ReplyAction="http://tempuri.org/IProcessService/GetAllEmailDocumentTemplatesResponse")]
        System.Threading.Tasks.Task<TESTING.WorkflowService.KeyValuePairItem[]> GetAllEmailDocumentTemplatesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProcessServiceChannel : TESTING.WorkflowService.IProcessService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProcessServiceClient : System.ServiceModel.ClientBase<TESTING.WorkflowService.IProcessService>, TESTING.WorkflowService.IProcessService {
        
        public ProcessServiceClient() {
        }
        
        public ProcessServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProcessServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProcessServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProcessServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int GetProcessInstanceCountFromWorkflowID(string idWorkflow) {
            return base.Channel.GetProcessInstanceCountFromWorkflowID(idWorkflow);
        }
        
        public System.Threading.Tasks.Task<int> GetProcessInstanceCountFromWorkflowIDAsync(string idWorkflow) {
            return base.Channel.GetProcessInstanceCountFromWorkflowIDAsync(idWorkflow);
        }
        
        public TESTING.WorkflowService.ActivityItem[] GetActivityItems() {
            return base.Channel.GetActivityItems();
        }
        
        public System.Threading.Tasks.Task<TESTING.WorkflowService.ActivityItem[]> GetActivityItemsAsync() {
            return base.Channel.GetActivityItemsAsync();
        }
        
        public TESTING.WorkflowService.WorkflowItem[] GetWorkflowItems() {
            return base.Channel.GetWorkflowItems();
        }
        
        public System.Threading.Tasks.Task<TESTING.WorkflowService.WorkflowItem[]> GetWorkflowItemsAsync() {
            return base.Channel.GetWorkflowItemsAsync();
        }
        
        public TESTING.WorkflowService.WorkflowItem GetWorkflowItem(string idWorkflow, string userGuid) {
            return base.Channel.GetWorkflowItem(idWorkflow, userGuid);
        }
        
        public System.Threading.Tasks.Task<TESTING.WorkflowService.WorkflowItem> GetWorkflowItemAsync(string idWorkflow, string userGuid) {
            return base.Channel.GetWorkflowItemAsync(idWorkflow, userGuid);
        }
        
        public void SaveWorkflowMetaData(string idWorkflow, string name, string description, System.Nullable<System.DateTime> validFrom, System.Nullable<System.DateTime> validTo, string userGuid) {
            base.Channel.SaveWorkflowMetaData(idWorkflow, name, description, validFrom, validTo, userGuid);
        }
        
        public System.Threading.Tasks.Task SaveWorkflowMetaDataAsync(string idWorkflow, string name, string description, System.Nullable<System.DateTime> validFrom, System.Nullable<System.DateTime> validTo, string userGuid) {
            return base.Channel.SaveWorkflowMetaDataAsync(idWorkflow, name, description, validFrom, validTo, userGuid);
        }
        
        public void SaveWorkflowXmlDefinition(string idWorkflow, string workflowXml, string userGuid) {
            base.Channel.SaveWorkflowXmlDefinition(idWorkflow, workflowXml, userGuid);
        }
        
        public System.Threading.Tasks.Task SaveWorkflowXmlDefinitionAsync(string idWorkflow, string workflowXml, string userGuid) {
            return base.Channel.SaveWorkflowXmlDefinitionAsync(idWorkflow, workflowXml, userGuid);
        }
        
        public TESTING.WorkflowService.WorkflowItem CreateWorkflow(string name, string description, System.Nullable<System.DateTime> validFrom, System.Nullable<System.DateTime> validTo) {
            return base.Channel.CreateWorkflow(name, description, validFrom, validTo);
        }
        
        public System.Threading.Tasks.Task<TESTING.WorkflowService.WorkflowItem> CreateWorkflowAsync(string name, string description, System.Nullable<System.DateTime> validFrom, System.Nullable<System.DateTime> validTo) {
            return base.Channel.CreateWorkflowAsync(name, description, validFrom, validTo);
        }
        
        public TESTING.WorkflowService.WorkflowItem CheckoutWorkflow(string idWorkflow, string userGuid) {
            return base.Channel.CheckoutWorkflow(idWorkflow, userGuid);
        }
        
        public System.Threading.Tasks.Task<TESTING.WorkflowService.WorkflowItem> CheckoutWorkflowAsync(string idWorkflow, string userGuid) {
            return base.Channel.CheckoutWorkflowAsync(idWorkflow, userGuid);
        }
        
        public TESTING.WorkflowService.WorkflowItem CheckinWorkflow(string idWorkflow, string userGuid) {
            return base.Channel.CheckinWorkflow(idWorkflow, userGuid);
        }
        
        public System.Threading.Tasks.Task<TESTING.WorkflowService.WorkflowItem> CheckinWorkflowAsync(string idWorkflow, string userGuid) {
            return base.Channel.CheckinWorkflowAsync(idWorkflow, userGuid);
        }
        
        public TESTING.WorkflowService.WorkflowItem UndoCheckout(string idWorkflow, string userGuid) {
            return base.Channel.UndoCheckout(idWorkflow, userGuid);
        }
        
        public System.Threading.Tasks.Task<TESTING.WorkflowService.WorkflowItem> UndoCheckoutAsync(string idWorkflow, string userGuid) {
            return base.Channel.UndoCheckoutAsync(idWorkflow, userGuid);
        }
        
        public void DeleteWorkflow(string idWorkflow, bool deleteAllVersions) {
            base.Channel.DeleteWorkflow(idWorkflow, deleteAllVersions);
        }
        
        public System.Threading.Tasks.Task DeleteWorkflowAsync(string idWorkflow, bool deleteAllVersions) {
            return base.Channel.DeleteWorkflowAsync(idWorkflow, deleteAllVersions);
        }
        
        public string GetWorkflowXmlWithNewActivityId(string xml, string idActivity) {
            return base.Channel.GetWorkflowXmlWithNewActivityId(xml, idActivity);
        }
        
        public System.Threading.Tasks.Task<string> GetWorkflowXmlWithNewActivityIdAsync(string xml, string idActivity) {
            return base.Channel.GetWorkflowXmlWithNewActivityIdAsync(xml, idActivity);
        }
        
        public string GetWorkflowXmlWithNewSubworkflowActivity(string workflowXml, string activityID, string subworkflowDefinitionID, string subworkflowVariables) {
            return base.Channel.GetWorkflowXmlWithNewSubworkflowActivity(workflowXml, activityID, subworkflowDefinitionID, subworkflowVariables);
        }
        
        public System.Threading.Tasks.Task<string> GetWorkflowXmlWithNewSubworkflowActivityAsync(string workflowXml, string activityID, string subworkflowDefinitionID, string subworkflowVariables) {
            return base.Channel.GetWorkflowXmlWithNewSubworkflowActivityAsync(workflowXml, activityID, subworkflowDefinitionID, subworkflowVariables);
        }
        
        public bool IsPackageUsedInActiveWorkflow(string obcoGuid) {
            return base.Channel.IsPackageUsedInActiveWorkflow(obcoGuid);
        }
        
        public System.Threading.Tasks.Task<bool> IsPackageUsedInActiveWorkflowAsync(string obcoGuid) {
            return base.Channel.IsPackageUsedInActiveWorkflowAsync(obcoGuid);
        }
        
        public void WakeupWorkflow(string workflowInstanceID) {
            base.Channel.WakeupWorkflow(workflowInstanceID);
        }
        
        public System.Threading.Tasks.Task WakeupWorkflowAsync(string workflowInstanceID) {
            return base.Channel.WakeupWorkflowAsync(workflowInstanceID);
        }
        
        public TESTING.WorkflowService.WorkflowInstanceItem[] GetWorkflowInstances() {
            return base.Channel.GetWorkflowInstances();
        }
        
        public System.Threading.Tasks.Task<TESTING.WorkflowService.WorkflowInstanceItem[]> GetWorkflowInstancesAsync() {
            return base.Channel.GetWorkflowInstancesAsync();
        }
        
        public void SaveWorkflowInstanceItem(string idWorkflowInstance, string instanceXml) {
            base.Channel.SaveWorkflowInstanceItem(idWorkflowInstance, instanceXml);
        }
        
        public System.Threading.Tasks.Task SaveWorkflowInstanceItemAsync(string idWorkflowInstance, string instanceXml) {
            return base.Channel.SaveWorkflowInstanceItemAsync(idWorkflowInstance, instanceXml);
        }
        
        public TESTING.WorkflowService.WorkflowInstanceItem GetWorkflowInstanceItem(string workflowInstanceID) {
            return base.Channel.GetWorkflowInstanceItem(workflowInstanceID);
        }
        
        public System.Threading.Tasks.Task<TESTING.WorkflowService.WorkflowInstanceItem> GetWorkflowInstanceItemAsync(string workflowInstanceID) {
            return base.Channel.GetWorkflowInstanceItemAsync(workflowInstanceID);
        }
        
        public string GetDataHelperName(string workflowDefinitionID) {
            return base.Channel.GetDataHelperName(workflowDefinitionID);
        }
        
        public System.Threading.Tasks.Task<string> GetDataHelperNameAsync(string workflowDefinitionID) {
            return base.Channel.GetDataHelperNameAsync(workflowDefinitionID);
        }
        
        public string CreateWorkflowInstance(TESTING.WorkflowService.WorkflowMessageDataItem workflowMessageDataItem) {
            return base.Channel.CreateWorkflowInstance(workflowMessageDataItem);
        }
        
        public System.Threading.Tasks.Task<string> CreateWorkflowInstanceAsync(TESTING.WorkflowService.WorkflowMessageDataItem workflowMessageDataItem) {
            return base.Channel.CreateWorkflowInstanceAsync(workflowMessageDataItem);
        }
        
        public TESTING.WorkflowService.KeyValuePairItem[] GetAllEmailDocumentTemplates() {
            return base.Channel.GetAllEmailDocumentTemplates();
        }
        
        public System.Threading.Tasks.Task<TESTING.WorkflowService.KeyValuePairItem[]> GetAllEmailDocumentTemplatesAsync() {
            return base.Channel.GetAllEmailDocumentTemplatesAsync();
        }
    }
}
