@model Kapsch.IS.EMD.EMD20Web.Models.EnterpriseLocationModel
@using Kapsch.IS.EMD.EMD20Web.HelperExtensions
@{
    ViewBag.Title = "Create";
    ViewBag.TooltipUrl = Request.Url.Scheme + "://" + Request.Url.Authority + "/Quickinfo/EnterpriseLocation_Create.html";
}

@Html.Partial("~/Views/Shared/Javascript/_TooltipMetaData.cshtml")

<div id="formcontent">
    @using (Ajax.BeginForm("DoCreate", "EnterpriseLocation", null, new AjaxOptions
    {
        HttpMethod = "Post",
        OnBegin = "formValidation.OnBegin(xhr)",
        OnSuccess = "formValidation.OnSuccess(xhr)",
        OnFailure = "formValidation.OnFailure(xhr)"
    }))
    {
        @Html.AntiForgeryToken()

        @Html.HiddenFor(model => model.Guid)
        @Html.HiddenFor(model => model.Created)
        @Html.HiddenFor(model => model.HistoryGuid)
        @Html.HiddenFor(model => model.Modified)
        @Html.HiddenFor(model => model.ValidFrom)
        @Html.HiddenFor(model => model.ValidTo)

        <div id="formresults" class="infobox error" style="display:none"></div>

        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="k-edit-form-container" style="float:left;">
                <div class="form-group">
                    @Html.LabelForRequired(model => model.DistList_int, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.DistList_int)
                        @Html.ValidationMessageFor(model => model.DistList_int, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelForRequired(model => model.DistList_ext, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.DistList_ext)
                        @Html.ValidationMessageFor(model => model.DistList_ext, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelForRequired(model => model.E_Guid, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @(
                            Html.Kendo().DropDownListFor(m => m)
                            .OptionLabel("Please select")
                            .Name("E_Guid")
                            .DataTextField("Text")
                            .DataValueField("Value")
                            .HtmlAttributes(new { @style = "width:100%" })
                            .Filter(FilterType.Contains)
                            .IgnoreCase(true)
                            .AutoBind(true)
                            .DataSource(source =>
                            {
                                source.Read(read =>
                                {
                                    read.Action("ReadForSelect", "Enterprise");
                                })
                                .ServerFiltering(false);
                            })
                        )
                        @Html.ValidationMessageFor(model => model.E_Guid, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelForRequired(model => model.L_Guid, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @(
                            Html.Kendo().DropDownListFor(m => m)
                            .OptionLabel("Please select")
                            .Name("L_Guid")
                            .DataTextField("Text")
                            .DataValueField("Value")
                            .HtmlAttributes(new { @style = "width:100%" })
                            .Filter(FilterType.Contains)
                            .IgnoreCase(true)
                            .AutoBind(true)
                            .DataSource(source =>
                            {
                                source.Read(read =>
                                {
                                    read.Action("ReadForSelect", "Location");
                                })
                                .ServerFiltering(false);
                            })
                        )

                        @Html.ValidationMessageFor(model => model.L_Guid, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group form-group-buttons">
                    <label></label>
                    <div class="col-md-10">

                        <button type="button" value="Cancel" class="k-button" onclick="closeWindow();">Cancel</button>
                        <input type="submit" value="Save" class="btn k-button" />
                    </div>
                </div>

            </div>
        </div>
    }
</div>